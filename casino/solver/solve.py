from pwn import *
import sympy
from Crypto.Util.number import long_to_bytes

r = process(["python3", "casino.py"])

def solve_chal_1():
    balance = 0
    count = 0
    while count < 10:
        r.recvuntil("Current balance: ")
        balance = int(r.recvline().decode().strip())
        print(f"Current balance: {balance}")

        r.recvuntil("Decrypt a number and enter your number\n")
        r.sendline("1")
        r.recvuntil("Your number: ")
        b = int(r.recvuntil(", ")[:-2].decode())
        enc_b = int(r.recvline().decode().strip())

        r.recvuntil("Current balance: ")
        balance = int(r.recvline().decode().strip())
        print(f"Current balance: {balance}")
        r.recvuntil("You'll never guess my number: ")
        enc_a = int(r.recvline().decode().strip())
        print(enc_a)
        r.recvuntil("Decrypt a number and enter your number\n")

        enc_c = enc_b * enc_a
        r.sendline("2")
        r.sendlineafter("Fine I'll decrypt a number for you: ", str(enc_c).encode())

        r.recvuntil("Your number: ")
        c = int(r.recvline().decode())
        result = int(c / b)

        r.sendlineafter("Enter your number: ", str(result).encode())
        count += 1

    print(r.recvline())
    print(r.recvline())


def solve_chal_2():
    e = 3
    n = [
        14380801591843526784955889980710057252366587652299513131837786815548090142744735356483939566767565556211530576469196964621979231223912109153010344122567223860886434941665929312831094052786084099113360942880412982102142381538968502171500961085495710879842217475308039987181148055543883658757536274169332750089440911211671290780325287220001649599180928748333391285286614130776533741582103756435703169261555202766739204361343690833788441439258625886733929526672794892890278904809749869370811625936516230206413338490054912909867082604517622149086345949537361085593313682738766284778554816266089654308798443885852256749757,
        14737093442549774816101139970652039606878382665928411666505952138687267916787402270198158912012157250796175869908219982550306392312437941712035164050132631738320764001790333096304861840962555229036798844771827889719858263648891957666405318844819644621503026140526410990683906417974902239233685869298556002830677065702348835485915807290083563954622988053270561910800649991813456254598195840787675727385452020850431994488779391041197789977801922069552852953758055401507501301687661347360797572488207159905982169810390009267419339451839111768018621563374537464685925778064483717979114031110717294887741497080356279306851,
        23195282441238750389083426105593326263673453241825796907096924653313808198101470918850553746348076774755778114318036036990023629132770572178277947539060583633860774142677473531413868103477699684283278019719470333213220986909699447973679432374782374464263393505043600595428490316714133965512187966332230756537287770085636896741657595828434982660273004304984462013278098638237023556672212654536375865482374464236285079782945562683058013799177629841856030792239941299421851217219316563858613037933116187198306482673468362224236159881101360552028692085681920414301939856386617836203733992267381690231386377602483726161449,
    ]
    enc = [
        9573219016453478877320999985174678634567465772702875348947512903216741430865998415510999570906687948108815352081371733126765707430023190051250934301928931661678159151727509302043630342505399255427960258417292037779677889299150039726463999562497194006112068762484424039435736568929434107874627352,
        9573219016453478877320999985174678634567465772702875348947512903216741430865998415510999570906687948108815352081371733126765707430023190051250934301928931661678159151727509302043630342505399255427960258417292037779677889299150039726463999562497194006112068762484424039435736568929434107874627352,
        9573219016453478877320999985174678634567465772702875348947512903216741430865998415510999570906687948108815352081371733126765707430023190051250934301928931661678159151727509302043630342505399255427960258417292037779677889299150039726463999562497194006112068762484424039435736568929434107874627352,
    ]

    N = n[0] * n[1] * n[2]
    b = [n[1] * n[2], n[0] * n[2], n[0] * n[1]]

    b_inv = [pow(b[0], -1, n[0]), pow(b[1], -1, n[1]), pow(b[2], -1, n[2])]
    x = 0
    for i in range(3):
        x += (enc[i] * b[i] * b_inv[i]) % N
        x %= N

    val, _ = sympy.integer_nthroot(x, 3)
    secret_msg = long_to_bytes(val)
    r.sendlineafter("Tell me the passcode: ", secret_msg)
    print(r.recvline())


solve_chal_1()
solve_chal_2()

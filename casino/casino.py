from Crypto.PublicKey import RSA
from Crypto.Util.number import bytes_to_long
from random import randint
import math

print("DO YOU WANT TO TEST YOUR LUCK?")
print("WELCOME TO MY CASINOOOOO")

with open("myprivatekey.pem", "rb") as f:
    data = f.read()
    priv_key = RSA.import_key(data)

with open("mypublickey.pem", "rb") as f:
    data = f.read()
    pub_key = RSA.import_key(data)


print("DO YOU WANT TO TEST YOUR LUCK?")
print("WELCOME TO MY CASINOOOOO")


solved_chal_1 = False
solved_chal_2 = False


def chal_1():
    global solved_chal_1
    balance = 0
    print("========== CHAL 1 ==========")
    print("I hope you have good luck, otherwise you'll never beat my odds!")

    while balance < 200:
        print(f"\nCurrent balance: {balance}")

        if balance < -200:
            print("You owe me too much money!")
            print("Guess you'll have to start working here to pay me back!")
            break

        a = randint(1, 200)
        print("value: ", a)
        enc_a = pow(a, pub_key.e, pub_key.n)
        print(f"You'll never guess my number: {enc_a}")
        val = int(
            input(
                "Choose an option:\n1. Luck is on my side\n2. Decrypt a number and enter your number\n"
            )
        )

        b = 0

        if val == 1:
            b = randint(1, 200)
            print(f"Your number: {b}, {pow(b, pub_key.e, pub_key.n)}")
            if b == a:
                balance += 30
                print("Hmm...You got lucky!")
            else:
                balance -= 10
                print("Oh well, better luck next time...")

        elif val == 2:
            enc_num = int(input("Fine I'll decrypt a number for you: "))

            if enc_a == enc_num:
                print("STOP CHEATING!")
                continue

            dec_num = pow(enc_num, priv_key.d, pub_key.n)
            print(f"Your number: {dec_num}")

            b = int(input("Enter your number: "))

            if b == a:
                balance += 30
                print("Hmm...You got lucky!")
            else:
                balance -= 10
                print("Oh well, better luck next time...")

        else:
            print("No such option, try again!")

    if balance >= 200:
        solved_chal_1 = True
        print("HOW DID YOU BEAT THE ODDS?")


def chal_2():
    global solved_chal_2
    print("========== CHAL 2 ==========")
    print("You got lucky in the last challenge...")
    print(
        "Guessing numbers was too easy, now guess my secret passcode and I'll let you in!"
    )

    secret_msg = ""
    with open("chal_2_secret.txt", "rb") as f:
        secret_msg = f.read()

    while not solved_chal_2:
        e = 3
        # precomputed n values
        stored_n = [
            14380801591843526784955889980710057252366587652299513131837786815548090142744735356483939566767565556211530576469196964621979231223912109153010344122567223860886434941665929312831094052786084099113360942880412982102142381538968502171500961085495710879842217475308039987181148055543883658757536274169332750089440911211671290780325287220001649599180928748333391285286614130776533741582103756435703169261555202766739204361343690833788441439258625886733929526672794892890278904809749869370811625936516230206413338490054912909867082604517622149086345949537361085593313682738766284778554816266089654308798443885852256749757,
            14737093442549774816101139970652039606878382665928411666505952138687267916787402270198158912012157250796175869908219982550306392312437941712035164050132631738320764001790333096304861840962555229036798844771827889719858263648891957666405318844819644621503026140526410990683906417974902239233685869298556002830677065702348835485915807290083563954622988053270561910800649991813456254598195840787675727385452020850431994488779391041197789977801922069552852953758055401507501301687661347360797572488207159905982169810390009267419339451839111768018621563374537464685925778064483717979114031110717294887741497080356279306851,
            23195282441238750389083426105593326263673453241825796907096924653313808198101470918850553746348076774755778114318036036990023629132770572178277947539060583633860774142677473531413868103477699684283278019719470333213220986909699447973679432374782374464263393505043600595428490316714133965512187966332230756537287770085636896741657595828434982660273004304984462013278098638237023556672212654536375865482374464236285079782945562683058013799177629841856030792239941299421851217219316563858613037933116187198306482673468362224236159881101360552028692085681920414301939856386617836203733992267381690231386377602483726161449,
            21577812931170827454153166142742236246075565722516269587587820369151355845272984420396499090342715572953409937782326911219863703898480862679007998544666911697880551007379289709626157252873256248573168018154333531994260565805096967897073569589521110272755165945345554550200990678020792684657157481239161171046583856980253607575034566111713547800129756655440550564171600034953110782940020770640714897017026411560190142453912811862212716588275039846032174847667277899843444404185784413093697911582326929951405861557285167806103078207344561789138256194781975711822027818155137555567741988932745100708882774816509871370067,
            19812581436777713034778057983564553810085208891072975697582874755455207190273657557073311610920958827662916478299036920118348061368860022853103470169748870187883609850447738522612489679261610902095573914416690442889448040484758346479004775191218194847798547763830839369855758685969790663029603158954969611784366279838604177837350828827851683884660168680479551403560747958959934368662612788928567929728492414243895895531260028893809888790580964293766350357538698220861391553160005229575665421181937542291091085800610108921354472353225246184715085330464332502930850676807577593820308317676075272875917512205200576205561,
            11037982316481568296705097605237209815192196750103964530316406198271549797996468212815575054431852757163644194643964386520210103783067505847885985667141503129995067320185547754697674890634962096494992344123274912100215208503752205658529409589375114042424863435679204342597906947433102359419800410741877354770344757085009810142236609686318143163137298522316401187133762556522768179766392973062692980775895192893731363539230105834447411602114572768582076436328787685382072278355994423025801372393704867871247461686970100333817191672220757893656874706769204131322833773026684708821402137723353354418499272399820962996283,
        ]

        n = stored_n[randint(0, len(stored_n))]

        print("I suppose it's fine letting you know the public keys...")
        print("I'm sure I will still win!")
        print(f"e = {e}")
        print(f"n = {n}")
        msg = bytes_to_long(secret_msg)
        enc_msg = pow(msg, e, n)
        print(f"enc = {enc_msg}")

        val = input("Tell me the passcode: ").encode()

        if val == secret_msg:
            solved_chal_2 = True
        else:
            print("Ha! I see you have run out of luck!")


chal_1()
if not solved_chal_1:
    exit(0)

chal_2()
if not solved_chal_2:
    exit(0)

with open("flag.txt", "r") as f:
    print(f.read())
